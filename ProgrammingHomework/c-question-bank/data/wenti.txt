01001
数据类型运算符与表达式
1
不是C语言提供的合法关键字是（ ）
A.switch B.chear C.case D.defult
B
0
01002
数据类型运算符与表达式
2
下列正确的标识符是（ ）
A.-a1 B.a[i] C.a2_i D.int t
C
1
01003
数据类型运算符与表达式
3
已知int x=5,y=5,z=5;执行语句x%=y+z；后，x的值是（ ）
A.0 B.1 C.5 D.6
C
2
01004
数据类型运算与表达式
4
有：int w=7,x=12,y=3,m: 执行下面语句后m的值是（ ）
m=(w>x)?w:x;
m=(m>y)?m:y;
A.12 B.0 C.3 D.1
A
1
01005
数据类型运算符与表达式
4
设整型变量a=2，则执行下列语句后，浮点型变量b的值不为0.5约是（ ）
A.b=1.0/a B.b=(float)(1/a) C.b=1/(float)a D.b=1/(a*1.0)
B
1
01006
选择结构
1
在C语言中，认为（ ）为逻辑“真”
A.true B.大于0的数 C.非0整数 D.非0的数
D
2
01007
选择结构
2
表示关系x<=y<=z的C语言表达式为（ ）
A.(x<=y)&&(y<=z)  B.(x<=y)AND(y<=z)  C.(x<=y=z)  D.(x<=y)&(y<=z)
A
3
01008
选择结构
3
为表示逻辑表达式79<X<90,应使用的C语言表达式为（  ）
A.(X>79)&&(X<90)  B.(X>79)!=(X<90)  C.79<X<90  D.(X>79)||(X<90)
A
0
01009
选择结构
2
C语言中用（ ）表示逻辑“真”
A.true  B.整数值1  C.非零整数值  D.false
B
1
01010
选择结构
1
在C语言语句中，用来决定分支流程的表达式是（ ）
A.可用任意表达式   B.只能用逻辑表达式或关系表达式  C.只能用逻辑表达式   D.只能用关系表达式
A
2
01011
循环结构
1
break语句不能出现在（ ）语句中
A.switch  B.for  C.while  D.if else
D
4
01012
循环结构
3
语句while(!y);中的表达式！y等价于(  )
A.y==0  B.y!=1  C.y=！0  D.y==1
A
1
01013
循环结构
3
若有："int a=1,x=1:",则循环语句“while(a<10)x++;a++;"的循环执行（  ）
A.无限次  B.不确定次  C.10次  D.9次
A
2
01014
循环结构
3
下列循环语句中有语法错误的是（ ）
A.while(x=y) 5;  B.while(0)  C.do 2;while(x= =b);  D.do x++ while(x= =10);
D
2
01015
循环结构
3
循环“for(i=0,x=1;i=10&&x>0;i++);”的循环执行（ ）
A.无限次  B.不确定次  C.10次  D.9次
A
2
01016
整组
2
已知：int a[10];则对a整组元素的正确引用是（ ）
A.a[10]  B.a[3.5]  C.a(5)  D.a[0]
D
1
01017
整组
4
下列说法错误的是（  ）
A.构成数组的所有元素的数据类型必须是相同的
B.用指针法引用数组元素允许数组元素的下标越界
C.一维数组的下标依次是1，2，3……
D.定义数组的长度可以是整型常量表达式
C
2
01018
函数
3
C语言中对函数的描述正确的是（  ）
A.可以嵌套调用，不可以递归调用 
B.可以嵌套定义
C.嵌套调用，递归调用均可
D.不可以嵌套调用
C
2
01019
函数
5
执行语句char c[10]={"abcd"},*pc=c后，*（pc+4)的值是（ ）
A."abcd"  B.'\0'  C.'d'  D.不确定
B
1
01020
函数
5
下面程序的输出结果是（  ）
A.0  B.1  C.2  D.输出错误
main()
{  int a[]={1,2,3,4,5,6,7,8,9,0},*p;
   p=a;
   printf("%d\n",*p+1);
}
C
2














































































